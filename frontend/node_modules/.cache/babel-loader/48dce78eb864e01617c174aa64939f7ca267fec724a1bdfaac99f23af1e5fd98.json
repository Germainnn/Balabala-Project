{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Initialize mock data from localStorage or use defaults\nconst initializeLocalStorage = () => {\n  if (!localStorage.getItem('mockTimeBlocks')) {\n    localStorage.setItem('mockTimeBlocks', JSON.stringify([{\n      id: '1',\n      title: 'Project Meeting',\n      description: 'Discuss project timeline and milestones',\n      date: new Date().toISOString().split('T')[0],\n      startTime: '09:00',\n      endTime: '10:30',\n      category: 'work',\n      priority: 'high'\n    }, {\n      id: '2',\n      title: 'Study Session',\n      description: 'Review course materials for upcoming exam',\n      date: new Date().toISOString().split('T')[0],\n      startTime: '14:00',\n      endTime: '16:00',\n      category: 'academic',\n      priority: 'high'\n    }, {\n      id: '3',\n      title: 'Exercise',\n      description: 'Go for a run in the park',\n      date: new Date().toISOString().split('T')[0],\n      startTime: '17:30',\n      endTime: '18:30',\n      category: 'personal',\n      priority: 'medium'\n    }]));\n  }\n  if (!localStorage.getItem('mockRecurringTasks')) {\n    localStorage.setItem('mockRecurringTasks', JSON.stringify([{\n      id: '1',\n      title: 'Team Standup',\n      description: 'Daily team meeting to discuss progress',\n      frequency: 'daily',\n      category: 'work',\n      priority: 'high',\n      completed: false,\n      nextDueDate: new Date().toISOString().split('T')[0],\n      createdAt: new Date().toISOString()\n    }, {\n      id: '2',\n      title: 'Weekly Report',\n      description: 'Submit weekly progress report',\n      frequency: 'weekly',\n      category: 'work',\n      priority: 'medium',\n      completed: false,\n      nextDueDate: new Date().toISOString().split('T')[0],\n      createdAt: new Date().toISOString()\n    }, {\n      id: '3',\n      title: 'Pay Bills',\n      description: 'Pay monthly bills and subscriptions',\n      frequency: 'monthly',\n      category: 'personal',\n      priority: 'high',\n      completed: false,\n      nextDueDate: new Date().toISOString().split('T')[0],\n      createdAt: new Date().toISOString()\n    }]));\n  }\n};\n\n// Call once to initialize\ninitializeLocalStorage();\n\n// Helper functions to interact with localStorage\nconst getMockTimeBlocks = () => {\n  return JSON.parse(localStorage.getItem('mockTimeBlocks') || '[]');\n};\nconst setMockTimeBlocks = blocks => {\n  localStorage.setItem('mockTimeBlocks', JSON.stringify(blocks));\n  return blocks;\n};\nconst getMockRecurringTasks = () => {\n  return JSON.parse(localStorage.getItem('mockRecurringTasks') || '[]');\n};\nconst setMockRecurringTasks = tasks => {\n  localStorage.setItem('mockRecurringTasks', JSON.stringify(tasks));\n  return tasks;\n};\n\n// Time Block API calls\nexport const getTimeBlocks = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/timeblocks`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch time blocks');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching time blocks:', error);\n    // Return mock data from localStorage\n    return getMockTimeBlocks();\n  }\n};\nexport const createTimeBlock = async timeBlock => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/timeblocks`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(timeBlock)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create time block');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating time block:', error);\n    // Save to localStorage\n    const blocks = getMockTimeBlocks();\n    const mockBlock = {\n      ...timeBlock,\n      id: Date.now().toString()\n    };\n    blocks.push(mockBlock);\n    setMockTimeBlocks(blocks);\n    return mockBlock;\n  }\n};\nexport const updateTimeBlock = async timeBlock => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/timeblocks/${timeBlock.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(timeBlock)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update time block');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating time block:', error);\n    // Update in localStorage\n    const blocks = getMockTimeBlocks();\n    const index = blocks.findIndex(block => block.id === timeBlock.id);\n    if (index !== -1) {\n      blocks[index] = timeBlock;\n      setMockTimeBlocks(blocks);\n      return timeBlock;\n    }\n    return null;\n  }\n};\nexport const deleteTimeBlock = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/timeblocks/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete time block');\n    }\n    return true;\n  } catch (error) {\n    console.error('Error deleting time block:', error);\n    // Delete from localStorage\n    const blocks = getMockTimeBlocks();\n    const updatedBlocks = blocks.filter(block => block.id !== id);\n    setMockTimeBlocks(updatedBlocks);\n    return true;\n  }\n};\n\n// Task API calls\nexport const getTasks = async () => {\n  const response = await axios.get(`${API_BASE_URL}/tasks`);\n  return response.data;\n};\nexport const createTask = async task => {\n  const response = await axios.post(`${API_BASE_URL}/tasks`, task);\n  return response.data;\n};\nexport const updateTask = async (id, task) => {\n  const response = await axios.put(`${API_BASE_URL}/tasks/${id}`, task);\n  return response.data;\n};\nexport const deleteTask = async id => {\n  const response = await axios.delete(`${API_BASE_URL}/tasks/${id}`);\n  return response.data;\n};\n\n// Pomodoro Session API calls\nexport const getPomodoroSessions = async () => {\n  const response = await axios.get(`${API_BASE_URL}/pomodoro-sessions`);\n  return response.data;\n};\nexport const createPomodoroSession = async session => {\n  const response = await axios.post(`${API_BASE_URL}/pomodoro-sessions`, session);\n  return response.data;\n};\n\n// Recurring Tasks API\nexport const getRecurringTasks = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch recurring tasks');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching recurring tasks:', error);\n    // Return mock data from localStorage\n    return getMockRecurringTasks();\n  }\n};\nexport const createRecurringTask = async task => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create recurring task');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating recurring task:', error);\n    // Save to localStorage\n    const tasks = getMockRecurringTasks();\n    const mockTask = {\n      ...task,\n      id: Date.now().toString(),\n      completed: false,\n      createdAt: new Date().toISOString()\n    };\n    tasks.push(mockTask);\n    setMockRecurringTasks(tasks);\n    return mockTask;\n  }\n};\nexport const updateRecurringTask = async task => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks/${task.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update recurring task');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating recurring task:', error);\n    // Update in localStorage\n    const tasks = getMockRecurringTasks();\n    const index = tasks.findIndex(t => t.id === task.id);\n    if (index !== -1) {\n      tasks[index] = task;\n      setMockRecurringTasks(tasks);\n      return task;\n    }\n    return null;\n  }\n};\nexport const deleteRecurringTask = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete recurring task');\n    }\n    return true;\n  } catch (error) {\n    console.error('Error deleting recurring task:', error);\n    // Delete from localStorage\n    const tasks = getMockRecurringTasks();\n    const updatedTasks = tasks.filter(task => task.id !== id);\n    setMockRecurringTasks(updatedTasks);\n    return true;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","initializeLocalStorage","localStorage","getItem","setItem","JSON","stringify","id","title","description","date","Date","toISOString","split","startTime","endTime","category","priority","frequency","completed","nextDueDate","createdAt","getMockTimeBlocks","parse","setMockTimeBlocks","blocks","getMockRecurringTasks","setMockRecurringTasks","tasks","getTimeBlocks","response","fetch","ok","Error","json","error","console","createTimeBlock","timeBlock","method","headers","body","mockBlock","now","toString","push","updateTimeBlock","index","findIndex","block","deleteTimeBlock","updatedBlocks","filter","getTasks","get","data","createTask","task","post","updateTask","put","deleteTask","delete","getPomodoroSessions","createPomodoroSession","session","getRecurringTasks","createRecurringTask","mockTask","updateRecurringTask","t","deleteRecurringTask","updatedTasks"],"sources":["C:/Users/wwjie/time-blocking-app/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Initialize mock data from localStorage or use defaults\r\nconst initializeLocalStorage = () => {\r\n  if (!localStorage.getItem('mockTimeBlocks')) {\r\n    localStorage.setItem('mockTimeBlocks', JSON.stringify([\r\n      {\r\n        id: '1',\r\n        title: 'Project Meeting',\r\n        description: 'Discuss project timeline and milestones',\r\n        date: new Date().toISOString().split('T')[0],\r\n        startTime: '09:00',\r\n        endTime: '10:30',\r\n        category: 'work',\r\n        priority: 'high'\r\n      },\r\n      {\r\n        id: '2',\r\n        title: 'Study Session',\r\n        description: 'Review course materials for upcoming exam',\r\n        date: new Date().toISOString().split('T')[0],\r\n        startTime: '14:00',\r\n        endTime: '16:00',\r\n        category: 'academic',\r\n        priority: 'high'\r\n      },\r\n      {\r\n        id: '3',\r\n        title: 'Exercise',\r\n        description: 'Go for a run in the park',\r\n        date: new Date().toISOString().split('T')[0],\r\n        startTime: '17:30',\r\n        endTime: '18:30',\r\n        category: 'personal',\r\n        priority: 'medium'\r\n      }\r\n    ]));\r\n  }\r\n\r\n  if (!localStorage.getItem('mockRecurringTasks')) {\r\n    localStorage.setItem('mockRecurringTasks', JSON.stringify([\r\n      {\r\n        id: '1',\r\n        title: 'Team Standup',\r\n        description: 'Daily team meeting to discuss progress',\r\n        frequency: 'daily',\r\n        category: 'work',\r\n        priority: 'high',\r\n        completed: false,\r\n        nextDueDate: new Date().toISOString().split('T')[0],\r\n        createdAt: new Date().toISOString()\r\n      },\r\n      {\r\n        id: '2',\r\n        title: 'Weekly Report',\r\n        description: 'Submit weekly progress report',\r\n        frequency: 'weekly',\r\n        category: 'work',\r\n        priority: 'medium',\r\n        completed: false,\r\n        nextDueDate: new Date().toISOString().split('T')[0],\r\n        createdAt: new Date().toISOString()\r\n      },\r\n      {\r\n        id: '3',\r\n        title: 'Pay Bills',\r\n        description: 'Pay monthly bills and subscriptions',\r\n        frequency: 'monthly',\r\n        category: 'personal',\r\n        priority: 'high',\r\n        completed: false,\r\n        nextDueDate: new Date().toISOString().split('T')[0],\r\n        createdAt: new Date().toISOString()\r\n      }\r\n    ]));\r\n  }\r\n};\r\n\r\n// Call once to initialize\r\ninitializeLocalStorage();\r\n\r\n// Helper functions to interact with localStorage\r\nconst getMockTimeBlocks = () => {\r\n  return JSON.parse(localStorage.getItem('mockTimeBlocks') || '[]');\r\n};\r\n\r\nconst setMockTimeBlocks = (blocks) => {\r\n  localStorage.setItem('mockTimeBlocks', JSON.stringify(blocks));\r\n  return blocks;\r\n};\r\n\r\nconst getMockRecurringTasks = () => {\r\n  return JSON.parse(localStorage.getItem('mockRecurringTasks') || '[]');\r\n};\r\n\r\nconst setMockRecurringTasks = (tasks) => {\r\n  localStorage.setItem('mockRecurringTasks', JSON.stringify(tasks));\r\n  return tasks;\r\n};\r\n\r\n// Time Block API calls\r\nexport const getTimeBlocks = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/timeblocks`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch time blocks');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching time blocks:', error);\r\n    // Return mock data from localStorage\r\n    return getMockTimeBlocks();\r\n  }\r\n};\r\n\r\nexport const createTimeBlock = async (timeBlock) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/timeblocks`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(timeBlock),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to create time block');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error creating time block:', error);\r\n    // Save to localStorage\r\n    const blocks = getMockTimeBlocks();\r\n    const mockBlock = {\r\n      ...timeBlock,\r\n      id: Date.now().toString(),\r\n    };\r\n    blocks.push(mockBlock);\r\n    setMockTimeBlocks(blocks);\r\n    return mockBlock;\r\n  }\r\n};\r\n\r\nexport const updateTimeBlock = async (timeBlock) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/timeblocks/${timeBlock.id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(timeBlock),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to update time block');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error updating time block:', error);\r\n    // Update in localStorage\r\n    const blocks = getMockTimeBlocks();\r\n    const index = blocks.findIndex(block => block.id === timeBlock.id);\r\n    if (index !== -1) {\r\n      blocks[index] = timeBlock;\r\n      setMockTimeBlocks(blocks);\r\n      return timeBlock;\r\n    }\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const deleteTimeBlock = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/timeblocks/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete time block');\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting time block:', error);\r\n    // Delete from localStorage\r\n    const blocks = getMockTimeBlocks();\r\n    const updatedBlocks = blocks.filter(block => block.id !== id);\r\n    setMockTimeBlocks(updatedBlocks);\r\n    return true;\r\n  }\r\n};\r\n\r\n// Task API calls\r\nexport const getTasks = async () => {\r\n  const response = await axios.get(`${API_BASE_URL}/tasks`);\r\n  return response.data;\r\n};\r\n\r\nexport const createTask = async (task) => {\r\n  const response = await axios.post(`${API_BASE_URL}/tasks`, task);\r\n  return response.data;\r\n};\r\n\r\nexport const updateTask = async (id, task) => {\r\n  const response = await axios.put(`${API_BASE_URL}/tasks/${id}`, task);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteTask = async (id) => {\r\n  const response = await axios.delete(`${API_BASE_URL}/tasks/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Pomodoro Session API calls\r\nexport const getPomodoroSessions = async () => {\r\n  const response = await axios.get(`${API_BASE_URL}/pomodoro-sessions`);\r\n  return response.data;\r\n};\r\n\r\nexport const createPomodoroSession = async (session) => {\r\n  const response = await axios.post(`${API_BASE_URL}/pomodoro-sessions`, session);\r\n  return response.data;\r\n};\r\n\r\n// Recurring Tasks API\r\nexport const getRecurringTasks = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch recurring tasks');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching recurring tasks:', error);\r\n    // Return mock data from localStorage\r\n    return getMockRecurringTasks();\r\n  }\r\n};\r\n\r\nexport const createRecurringTask = async (task) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(task),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to create recurring task');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error creating recurring task:', error);\r\n    // Save to localStorage\r\n    const tasks = getMockRecurringTasks();\r\n    const mockTask = {\r\n      ...task,\r\n      id: Date.now().toString(),\r\n      completed: false,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    tasks.push(mockTask);\r\n    setMockRecurringTasks(tasks);\r\n    return mockTask;\r\n  }\r\n};\r\n\r\nexport const updateRecurringTask = async (task) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks/${task.id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(task),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to update recurring task');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error updating recurring task:', error);\r\n    // Update in localStorage\r\n    const tasks = getMockRecurringTasks();\r\n    const index = tasks.findIndex(t => t.id === task.id);\r\n    if (index !== -1) {\r\n      tasks[index] = task;\r\n      setMockRecurringTasks(tasks);\r\n      return task;\r\n    }\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const deleteRecurringTask = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete recurring task');\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting recurring task:', error);\r\n    // Delete from localStorage\r\n    const tasks = getMockRecurringTasks();\r\n    const updatedTasks = tasks.filter(task => task.id !== id);\r\n    setMockRecurringTasks(updatedTasks);\r\n    return true;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}