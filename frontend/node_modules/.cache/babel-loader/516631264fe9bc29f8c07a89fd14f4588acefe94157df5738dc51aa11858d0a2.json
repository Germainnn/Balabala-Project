{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./MonthlyBoard.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const STATUSES=['Not Started','In Progress','Completed'];function MonthlyBoard(){const[projects,setProjects]=useState([]);const[showAddForm,setShowAddForm]=useState(false);const[newProject,setNewProject]=useState({title:'',description:'',startDate:'',endDate:'',status:'Not Started',tasks:[]});useEffect(()=>{// TODO: Load projects from API\nconst mockProjects=[{id:1,title:'Website Redesign',description:'Redesign company website with modern UI',startDate:'2024-03-01',endDate:'2024-03-31',status:'In Progress',tasks:[{id:1,title:'Design mockups',status:'Completed'},{id:2,title:'Frontend development',status:'In Progress'},{id:3,title:'Backend integration',status:'Not Started'}]},{id:2,title:'Mobile App Launch',description:'Launch new mobile app version',startDate:'2024-03-15',endDate:'2024-04-15',status:'Not Started',tasks:[{id:1,title:'Beta testing',status:'Not Started'},{id:2,title:'Marketing materials',status:'Not Started'}]}];setProjects(mockProjects);},[]);const handleSubmit=e=>{e.preventDefault();const project={id:Date.now(),...newProject,tasks:[]};setProjects([...projects,project]);setNewProject({title:'',description:'',startDate:'',endDate:'',status:'Not Started',tasks:[]});setShowAddForm(false);};const addTask=projectId=>{const taskTitle=prompt('Enter task title:');if(taskTitle){setProjects(projects.map(project=>{if(project.id===projectId){return{...project,tasks:[...project.tasks,{id:Date.now(),title:taskTitle,status:'Not Started'}]};}return project;}));}};const updateTaskStatus=(projectId,taskId,newStatus)=>{setProjects(projects.map(project=>{if(project.id===projectId){return{...project,tasks:project.tasks.map(task=>{if(task.id===taskId){return{...task,status:newStatus};}return task;})};}return project;}));};const updateProjectStatus=(projectId,newStatus)=>{setProjects(projects.map(project=>{if(project.id===projectId){return{...project,status:newStatus};}return project;}));};const deleteProject=projectId=>{setProjects(projects.filter(project=>project.id!==projectId));};const getStatusColor=status=>{switch(status.toLowerCase()){case'completed':return'var(--status-completed)';case'in progress':return'var(--status-in-progress)';default:return'var(--status-not-started)';}};const calculateProgress=tasks=>{if(tasks.length===0)return 0;const completed=tasks.filter(task=>task.status==='Completed').length;return Math.round(completed/tasks.length*100);};return/*#__PURE__*/_jsxs(\"div\",{className:\"monthly-board-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"board-header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header-left\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Monthly Projects\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"project-count\",children:[projects.length,\" projects\"]})]}),/*#__PURE__*/_jsx(\"button\",{className:\"button-primary\",onClick:()=>setShowAddForm(true),children:\"+ Add Project\"})]}),showAddForm&&/*#__PURE__*/_jsx(\"div\",{className:\"add-project-form\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Project Title\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newProject.title,onChange:e=>setNewProject({...newProject,title:e.target.value}),required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Status\"}),/*#__PURE__*/_jsx(\"select\",{value:newProject.status,onChange:e=>setNewProject({...newProject,status:e.target.value}),children:STATUSES.map(status=>/*#__PURE__*/_jsx(\"option\",{value:status,children:status},status))})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Description\"}),/*#__PURE__*/_jsx(\"textarea\",{value:newProject.description,onChange:e=>setNewProject({...newProject,description:e.target.value}),rows:\"3\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Start Date\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:newProject.startDate,onChange:e=>setNewProject({...newProject,startDate:e.target.value}),required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"End Date\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",value:newProject.endDate,onChange:e=>setNewProject({...newProject,endDate:e.target.value}),required:true})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-actions\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"button-primary\",children:\"Create Project\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"button-secondary\",onClick:()=>setShowAddForm(false),children:\"Cancel\"})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"projects-grid\",children:projects.map(project=>/*#__PURE__*/_jsxs(\"div\",{className:\"project-card\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"project-card-header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"project-title\",children:[/*#__PURE__*/_jsx(\"h4\",{children:project.title}),/*#__PURE__*/_jsx(\"select\",{value:project.status,onChange:e=>updateProjectStatus(project.id,e.target.value),className:\"status-select\",style:{backgroundColor:getStatusColor(project.status)},children:STATUSES.map(status=>/*#__PURE__*/_jsx(\"option\",{value:status,children:status},status))})]}),/*#__PURE__*/_jsx(\"button\",{className:\"delete-button\",onClick:()=>deleteProject(project.id),children:\"\\xD7\"})]}),/*#__PURE__*/_jsx(\"p\",{className:\"project-description\",children:project.description}),/*#__PURE__*/_jsxs(\"div\",{className:\"project-dates\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"date-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"date-label\",children:\"Start:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"date-value\",children:new Date(project.startDate).toLocaleDateString()})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"date-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"date-label\",children:\"End:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"date-value\",children:new Date(project.endDate).toLocaleDateString()})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"progress-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"progress-header\",children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Progress\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"progress-percentage\",children:[calculateProgress(project.tasks),\"%\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-fill\",style:{width:`${calculateProgress(project.tasks)}%`}})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"tasks-section\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tasks-header\",children:[/*#__PURE__*/_jsx(\"h5\",{children:\"Tasks\"}),/*#__PURE__*/_jsx(\"button\",{className:\"button-secondary small\",onClick:()=>addTask(project.id),children:\"+ Add Task\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"tasks-list\",children:project.tasks.map(task=>/*#__PURE__*/_jsxs(\"div\",{className:\"task-item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"task-title\",children:task.title}),/*#__PURE__*/_jsx(\"select\",{value:task.status,onChange:e=>updateTaskStatus(project.id,task.id,e.target.value),className:\"status-select small\",style:{backgroundColor:getStatusColor(task.status)},children:STATUSES.map(status=>/*#__PURE__*/_jsx(\"option\",{value:status,children:status},status))})]},task.id))})]})]},project.id))})]});}export default MonthlyBoard;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","STATUSES","MonthlyBoard","projects","setProjects","showAddForm","setShowAddForm","newProject","setNewProject","title","description","startDate","endDate","status","tasks","mockProjects","id","handleSubmit","e","preventDefault","project","Date","now","addTask","projectId","taskTitle","prompt","map","updateTaskStatus","taskId","newStatus","task","updateProjectStatus","deleteProject","filter","getStatusColor","toLowerCase","calculateProgress","length","completed","Math","round","className","children","onClick","onSubmit","type","value","onChange","target","required","rows","style","backgroundColor","toLocaleDateString","width"],"sources":["C:/Users/wwjie/time-blocking-app/frontend/src/components/MonthlyBoard/MonthlyBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './MonthlyBoard.css';\r\n\r\nconst STATUSES = ['Not Started', 'In Progress', 'Completed'];\r\n\r\nfunction MonthlyBoard() {\r\n  const [projects, setProjects] = useState([]);\r\n  const [showAddForm, setShowAddForm] = useState(false);\r\n  const [newProject, setNewProject] = useState({\r\n    title: '',\r\n    description: '',\r\n    startDate: '',\r\n    endDate: '',\r\n    status: 'Not Started',\r\n    tasks: []\r\n  });\r\n\r\n  useEffect(() => {\r\n    // TODO: Load projects from API\r\n    const mockProjects = [\r\n      {\r\n        id: 1,\r\n        title: 'Website Redesign',\r\n        description: 'Redesign company website with modern UI',\r\n        startDate: '2024-03-01',\r\n        endDate: '2024-03-31',\r\n        status: 'In Progress',\r\n        tasks: [\r\n          { id: 1, title: 'Design mockups', status: 'Completed' },\r\n          { id: 2, title: 'Frontend development', status: 'In Progress' },\r\n          { id: 3, title: 'Backend integration', status: 'Not Started' }\r\n        ]\r\n      },\r\n      {\r\n        id: 2,\r\n        title: 'Mobile App Launch',\r\n        description: 'Launch new mobile app version',\r\n        startDate: '2024-03-15',\r\n        endDate: '2024-04-15',\r\n        status: 'Not Started',\r\n        tasks: [\r\n          { id: 1, title: 'Beta testing', status: 'Not Started' },\r\n          { id: 2, title: 'Marketing materials', status: 'Not Started' }\r\n        ]\r\n      }\r\n    ];\r\n    setProjects(mockProjects);\r\n  }, []);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const project = {\r\n      id: Date.now(),\r\n      ...newProject,\r\n      tasks: []\r\n    };\r\n    setProjects([...projects, project]);\r\n    setNewProject({\r\n      title: '',\r\n      description: '',\r\n      startDate: '',\r\n      endDate: '',\r\n      status: 'Not Started',\r\n      tasks: []\r\n    });\r\n    setShowAddForm(false);\r\n  };\r\n\r\n  const addTask = (projectId) => {\r\n    const taskTitle = prompt('Enter task title:');\r\n    if (taskTitle) {\r\n      setProjects(projects.map(project => {\r\n        if (project.id === projectId) {\r\n          return {\r\n            ...project,\r\n            tasks: [\r\n              ...project.tasks,\r\n              {\r\n                id: Date.now(),\r\n                title: taskTitle,\r\n                status: 'Not Started'\r\n              }\r\n            ]\r\n          };\r\n        }\r\n        return project;\r\n      }));\r\n    }\r\n  };\r\n\r\n  const updateTaskStatus = (projectId, taskId, newStatus) => {\r\n    setProjects(projects.map(project => {\r\n      if (project.id === projectId) {\r\n        return {\r\n          ...project,\r\n          tasks: project.tasks.map(task => {\r\n            if (task.id === taskId) {\r\n              return { ...task, status: newStatus };\r\n            }\r\n            return task;\r\n          })\r\n        };\r\n      }\r\n      return project;\r\n    }));\r\n  };\r\n\r\n  const updateProjectStatus = (projectId, newStatus) => {\r\n    setProjects(projects.map(project => {\r\n      if (project.id === projectId) {\r\n        return { ...project, status: newStatus };\r\n      }\r\n      return project;\r\n    }));\r\n  };\r\n\r\n  const deleteProject = (projectId) => {\r\n    setProjects(projects.filter(project => project.id !== projectId));\r\n  };\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status.toLowerCase()) {\r\n      case 'completed':\r\n        return 'var(--status-completed)';\r\n      case 'in progress':\r\n        return 'var(--status-in-progress)';\r\n      default:\r\n        return 'var(--status-not-started)';\r\n    }\r\n  };\r\n\r\n  const calculateProgress = (tasks) => {\r\n    if (tasks.length === 0) return 0;\r\n    const completed = tasks.filter(task => task.status === 'Completed').length;\r\n    return Math.round((completed / tasks.length) * 100);\r\n  };\r\n\r\n  return (\r\n    <div className=\"monthly-board-container\">\r\n      <div className=\"board-header\">\r\n        <div className=\"header-left\">\r\n          <h3>Monthly Projects</h3>\r\n          <div className=\"project-count\">\r\n            {projects.length} projects\r\n          </div>\r\n        </div>\r\n        <button \r\n          className=\"button-primary\"\r\n          onClick={() => setShowAddForm(true)}\r\n        >\r\n          + Add Project\r\n        </button>\r\n      </div>\r\n\r\n      {showAddForm && (\r\n        <div className=\"add-project-form\">\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label>Project Title</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={newProject.title}\r\n                  onChange={(e) => setNewProject({ ...newProject, title: e.target.value })}\r\n                  required\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Status</label>\r\n                <select\r\n                  value={newProject.status}\r\n                  onChange={(e) => setNewProject({ ...newProject, status: e.target.value })}\r\n                >\r\n                  {STATUSES.map(status => (\r\n                    <option key={status} value={status}>{status}</option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label>Description</label>\r\n              <textarea\r\n                value={newProject.description}\r\n                onChange={(e) => setNewProject({ ...newProject, description: e.target.value })}\r\n                rows=\"3\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-row\">\r\n              <div className=\"form-group\">\r\n                <label>Start Date</label>\r\n                <input\r\n                  type=\"date\"\r\n                  value={newProject.startDate}\r\n                  onChange={(e) => setNewProject({ ...newProject, startDate: e.target.value })}\r\n                  required\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>End Date</label>\r\n                <input\r\n                  type=\"date\"\r\n                  value={newProject.endDate}\r\n                  onChange={(e) => setNewProject({ ...newProject, endDate: e.target.value })}\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"form-actions\">\r\n              <button type=\"submit\" className=\"button-primary\">Create Project</button>\r\n              <button \r\n                type=\"button\" \r\n                className=\"button-secondary\"\r\n                onClick={() => setShowAddForm(false)}\r\n              >\r\n                Cancel\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"projects-grid\">\r\n        {projects.map(project => (\r\n          <div key={project.id} className=\"project-card\">\r\n            <div className=\"project-card-header\">\r\n              <div className=\"project-title\">\r\n                <h4>{project.title}</h4>\r\n                <select\r\n                  value={project.status}\r\n                  onChange={(e) => updateProjectStatus(project.id, e.target.value)}\r\n                  className=\"status-select\"\r\n                  style={{ backgroundColor: getStatusColor(project.status) }}\r\n                >\r\n                  {STATUSES.map(status => (\r\n                    <option key={status} value={status}>{status}</option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <button \r\n                className=\"delete-button\"\r\n                onClick={() => deleteProject(project.id)}\r\n              >\r\n                ×\r\n              </button>\r\n            </div>\r\n\r\n            <p className=\"project-description\">{project.description}</p>\r\n\r\n            <div className=\"project-dates\">\r\n              <div className=\"date-item\">\r\n                <span className=\"date-label\">Start:</span>\r\n                <span className=\"date-value\">{new Date(project.startDate).toLocaleDateString()}</span>\r\n              </div>\r\n              <div className=\"date-item\">\r\n                <span className=\"date-label\">End:</span>\r\n                <span className=\"date-value\">{new Date(project.endDate).toLocaleDateString()}</span>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"progress-section\">\r\n              <div className=\"progress-header\">\r\n                <h5>Progress</h5>\r\n                <span className=\"progress-percentage\">{calculateProgress(project.tasks)}%</span>\r\n              </div>\r\n              <div className=\"progress-bar\">\r\n                <div \r\n                  className=\"progress-fill\"\r\n                  style={{ width: `${calculateProgress(project.tasks)}%` }}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"tasks-section\">\r\n              <div className=\"tasks-header\">\r\n                <h5>Tasks</h5>\r\n                <button \r\n                  className=\"button-secondary small\"\r\n                  onClick={() => addTask(project.id)}\r\n                >\r\n                  + Add Task\r\n                </button>\r\n              </div>\r\n              <div className=\"tasks-list\">\r\n                {project.tasks.map(task => (\r\n                  <div key={task.id} className=\"task-item\">\r\n                    <span className=\"task-title\">{task.title}</span>\r\n                    <select\r\n                      value={task.status}\r\n                      onChange={(e) => updateTaskStatus(project.id, task.id, e.target.value)}\r\n                      className=\"status-select small\"\r\n                      style={{ backgroundColor: getStatusColor(task.status) }}\r\n                    >\r\n                      {STATUSES.map(status => (\r\n                        <option key={status} value={status}>{status}</option>\r\n                      ))}\r\n                    </select>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MonthlyBoard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}