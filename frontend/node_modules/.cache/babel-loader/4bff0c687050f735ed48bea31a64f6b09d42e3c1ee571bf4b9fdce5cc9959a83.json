{"ast":null,"code":"// API utility functions for backend communication\n// Use relative URL in production, full URL in development\nconst API_BASE_URL=process.env.NODE_ENV==='production'?'/api':'http://localhost:3000/api';// Initialize mock data from localStorage or use defaults\nconst initializeLocalStorage=()=>{if(!localStorage.getItem('mockTimeBlocks')){localStorage.setItem('mockTimeBlocks',JSON.stringify([{id:'1',title:'Project Meeting',description:'Discuss project timeline and milestones',date:new Date().toISOString().split('T')[0],startTime:'09:00',endTime:'10:30',category:'work',priority:'high'},{id:'2',title:'Study Session',description:'Review course materials for upcoming exam',date:new Date().toISOString().split('T')[0],startTime:'14:00',endTime:'16:00',category:'academic',priority:'high'},{id:'3',title:'Exercise',description:'Go for a run in the park',date:new Date().toISOString().split('T')[0],startTime:'17:30',endTime:'18:30',category:'personal',priority:'medium'}]));}if(!localStorage.getItem('mockRecurringTasks')){localStorage.setItem('mockRecurringTasks',JSON.stringify([{id:'1',title:'Team Standup',description:'Daily team meeting to discuss progress',frequency:'daily',category:'work',priority:'high',completed:false,nextDueDate:new Date().toISOString().split('T')[0],createdAt:new Date().toISOString()},{id:'2',title:'Weekly Report',description:'Submit weekly progress report',frequency:'weekly',category:'work',priority:'medium',completed:false,nextDueDate:new Date().toISOString().split('T')[0],createdAt:new Date().toISOString()},{id:'3',title:'Pay Bills',description:'Pay monthly bills and subscriptions',frequency:'monthly',category:'personal',priority:'high',completed:false,nextDueDate:new Date().toISOString().split('T')[0],createdAt:new Date().toISOString()}]));}};// Call once to initialize\ninitializeLocalStorage();// Helper functions to interact with localStorage\nconst getMockTimeBlocks=()=>{return JSON.parse(localStorage.getItem('mockTimeBlocks')||'[]');};const setMockTimeBlocks=blocks=>{localStorage.setItem('mockTimeBlocks',JSON.stringify(blocks));return blocks;};const getMockRecurringTasks=()=>{return JSON.parse(localStorage.getItem('mockRecurringTasks')||'[]');};const setMockRecurringTasks=tasks=>{localStorage.setItem('mockRecurringTasks',JSON.stringify(tasks));return tasks;};// Time Block API calls\nexport const getTimeBlocks=async()=>{try{const response=await fetch(`${API_BASE_URL}/timeblocks`);if(!response.ok){throw new Error('Failed to fetch time blocks');}return await response.json();}catch(error){console.error('Error fetching time blocks:',error);// Return mock data from localStorage\nreturn getMockTimeBlocks();}};export const createTimeBlock=async timeBlock=>{try{const response=await fetch(`${API_BASE_URL}/timeblocks`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(timeBlock)});if(!response.ok){throw new Error('Failed to create time block');}return await response.json();}catch(error){console.error('Error creating time block:',error);// Save to localStorage\nconst blocks=getMockTimeBlocks();const mockBlock={...timeBlock,id:Date.now().toString()};blocks.push(mockBlock);setMockTimeBlocks(blocks);return mockBlock;}};export const updateTimeBlock=async timeBlock=>{try{const response=await fetch(`${API_BASE_URL}/timeblocks/${timeBlock.id}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(timeBlock)});if(!response.ok){throw new Error('Failed to update time block');}return await response.json();}catch(error){console.error('Error updating time block:',error);// Update in localStorage\nconst blocks=getMockTimeBlocks();const index=blocks.findIndex(block=>block.id===timeBlock.id);if(index!==-1){blocks[index]=timeBlock;setMockTimeBlocks(blocks);return timeBlock;}return null;}};export const deleteTimeBlock=async id=>{try{const response=await fetch(`${API_BASE_URL}/timeblocks/${id}`,{method:'DELETE'});if(!response.ok){throw new Error('Failed to delete time block');}return true;}catch(error){console.error('Error deleting time block:',error);// Delete from localStorage\nconst blocks=getMockTimeBlocks();const updatedBlocks=blocks.filter(block=>block.id!==id);setMockTimeBlocks(updatedBlocks);return true;}};// Task API calls (using Fetch API instead of axios for consistency)\nexport const getTasks=async()=>{try{const response=await fetch(`${API_BASE_URL}/tasks`);if(!response.ok){throw new Error('Failed to fetch tasks');}return await response.json();}catch(error){console.error('Error fetching tasks:',error);return[];}};export const createTask=async task=>{try{const response=await fetch(`${API_BASE_URL}/tasks`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(task)});if(!response.ok){throw new Error('Failed to create task');}return await response.json();}catch(error){console.error('Error creating task:',error);return null;}};export const updateTask=async(id,task)=>{try{const response=await fetch(`${API_BASE_URL}/tasks/${id}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(task)});if(!response.ok){throw new Error('Failed to update task');}return await response.json();}catch(error){console.error('Error updating task:',error);return null;}};export const deleteTask=async id=>{try{const response=await fetch(`${API_BASE_URL}/tasks/${id}`,{method:'DELETE'});if(!response.ok){throw new Error('Failed to delete task');}return await response.json();}catch(error){console.error('Error deleting task:',error);return null;}};// Pomodoro Session API calls\nexport const getPomodoroSessions=async()=>{try{const response=await fetch(`${API_BASE_URL}/pomodoro-sessions`);if(!response.ok){throw new Error('Failed to fetch pomodoro sessions');}return await response.json();}catch(error){console.error('Error fetching pomodoro sessions:',error);return[];}};export const createPomodoroSession=async session=>{try{const response=await fetch(`${API_BASE_URL}/pomodoro-sessions`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(session)});if(!response.ok){throw new Error('Failed to create pomodoro session');}return await response.json();}catch(error){console.error('Error creating pomodoro session:',error);return null;}};// Recurring Tasks API\nexport const getRecurringTasks=async()=>{try{const response=await fetch(`${API_BASE_URL}/recurring-tasks`);if(!response.ok){throw new Error('Failed to fetch recurring tasks');}return await response.json();}catch(error){console.error('Error fetching recurring tasks:',error);// Return mock data from localStorage\nreturn getMockRecurringTasks();}};export const createRecurringTask=async task=>{try{const response=await fetch(`${API_BASE_URL}/recurring-tasks`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(task)});if(!response.ok){throw new Error('Failed to create recurring task');}return await response.json();}catch(error){console.error('Error creating recurring task:',error);// Save to localStorage\nconst tasks=getMockRecurringTasks();const mockTask={...task,id:Date.now().toString(),completed:false,createdAt:new Date().toISOString()};tasks.push(mockTask);setMockRecurringTasks(tasks);return mockTask;}};export const updateRecurringTask=async task=>{try{const response=await fetch(`${API_BASE_URL}/recurring-tasks/${task.id}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(task)});if(!response.ok){throw new Error('Failed to update recurring task');}return await response.json();}catch(error){console.error('Error updating recurring task:',error);// Update in localStorage\nconst tasks=getMockRecurringTasks();const index=tasks.findIndex(t=>t.id===task.id);if(index!==-1){tasks[index]=task;setMockRecurringTasks(tasks);return task;}return null;}};export const deleteRecurringTask=async id=>{try{const response=await fetch(`${API_BASE_URL}/recurring-tasks/${id}`,{method:'DELETE'});if(!response.ok){throw new Error('Failed to delete recurring task');}return true;}catch(error){console.error('Error deleting recurring task:',error);// Delete from localStorage\nconst tasks=getMockRecurringTasks();const updatedTasks=tasks.filter(task=>task.id!==id);setMockRecurringTasks(updatedTasks);return true;}};","map":{"version":3,"names":["API_BASE_URL","process","env","NODE_ENV","initializeLocalStorage","localStorage","getItem","setItem","JSON","stringify","id","title","description","date","Date","toISOString","split","startTime","endTime","category","priority","frequency","completed","nextDueDate","createdAt","getMockTimeBlocks","parse","setMockTimeBlocks","blocks","getMockRecurringTasks","setMockRecurringTasks","tasks","getTimeBlocks","response","fetch","ok","Error","json","error","console","createTimeBlock","timeBlock","method","headers","body","mockBlock","now","toString","push","updateTimeBlock","index","findIndex","block","deleteTimeBlock","updatedBlocks","filter","getTasks","createTask","task","updateTask","deleteTask","getPomodoroSessions","createPomodoroSession","session","getRecurringTasks","createRecurringTask","mockTask","updateRecurringTask","t","deleteRecurringTask","updatedTasks"],"sources":["C:/Users/wwjie/time-blocking-app/frontend/src/utils/api.js"],"sourcesContent":["// API utility functions for backend communication\r\n\r\n// Use relative URL in production, full URL in development\r\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \r\n  ? '/api' \r\n  : 'http://localhost:3000/api';\r\n\r\n// Initialize mock data from localStorage or use defaults\r\nconst initializeLocalStorage = () => {\r\n  if (!localStorage.getItem('mockTimeBlocks')) {\r\n    localStorage.setItem('mockTimeBlocks', JSON.stringify([\r\n      {\r\n        id: '1',\r\n        title: 'Project Meeting',\r\n        description: 'Discuss project timeline and milestones',\r\n        date: new Date().toISOString().split('T')[0],\r\n        startTime: '09:00',\r\n        endTime: '10:30',\r\n        category: 'work',\r\n        priority: 'high'\r\n      },\r\n      {\r\n        id: '2',\r\n        title: 'Study Session',\r\n        description: 'Review course materials for upcoming exam',\r\n        date: new Date().toISOString().split('T')[0],\r\n        startTime: '14:00',\r\n        endTime: '16:00',\r\n        category: 'academic',\r\n        priority: 'high'\r\n      },\r\n      {\r\n        id: '3',\r\n        title: 'Exercise',\r\n        description: 'Go for a run in the park',\r\n        date: new Date().toISOString().split('T')[0],\r\n        startTime: '17:30',\r\n        endTime: '18:30',\r\n        category: 'personal',\r\n        priority: 'medium'\r\n      }\r\n    ]));\r\n  }\r\n\r\n  if (!localStorage.getItem('mockRecurringTasks')) {\r\n    localStorage.setItem('mockRecurringTasks', JSON.stringify([\r\n      {\r\n        id: '1',\r\n        title: 'Team Standup',\r\n        description: 'Daily team meeting to discuss progress',\r\n        frequency: 'daily',\r\n        category: 'work',\r\n        priority: 'high',\r\n        completed: false,\r\n        nextDueDate: new Date().toISOString().split('T')[0],\r\n        createdAt: new Date().toISOString()\r\n      },\r\n      {\r\n        id: '2',\r\n        title: 'Weekly Report',\r\n        description: 'Submit weekly progress report',\r\n        frequency: 'weekly',\r\n        category: 'work',\r\n        priority: 'medium',\r\n        completed: false,\r\n        nextDueDate: new Date().toISOString().split('T')[0],\r\n        createdAt: new Date().toISOString()\r\n      },\r\n      {\r\n        id: '3',\r\n        title: 'Pay Bills',\r\n        description: 'Pay monthly bills and subscriptions',\r\n        frequency: 'monthly',\r\n        category: 'personal',\r\n        priority: 'high',\r\n        completed: false,\r\n        nextDueDate: new Date().toISOString().split('T')[0],\r\n        createdAt: new Date().toISOString()\r\n      }\r\n    ]));\r\n  }\r\n};\r\n\r\n// Call once to initialize\r\ninitializeLocalStorage();\r\n\r\n// Helper functions to interact with localStorage\r\nconst getMockTimeBlocks = () => {\r\n  return JSON.parse(localStorage.getItem('mockTimeBlocks') || '[]');\r\n};\r\n\r\nconst setMockTimeBlocks = (blocks) => {\r\n  localStorage.setItem('mockTimeBlocks', JSON.stringify(blocks));\r\n  return blocks;\r\n};\r\n\r\nconst getMockRecurringTasks = () => {\r\n  return JSON.parse(localStorage.getItem('mockRecurringTasks') || '[]');\r\n};\r\n\r\nconst setMockRecurringTasks = (tasks) => {\r\n  localStorage.setItem('mockRecurringTasks', JSON.stringify(tasks));\r\n  return tasks;\r\n};\r\n\r\n// Time Block API calls\r\nexport const getTimeBlocks = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/timeblocks`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch time blocks');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching time blocks:', error);\r\n    // Return mock data from localStorage\r\n    return getMockTimeBlocks();\r\n  }\r\n};\r\n\r\nexport const createTimeBlock = async (timeBlock) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/timeblocks`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(timeBlock),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to create time block');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error creating time block:', error);\r\n    // Save to localStorage\r\n    const blocks = getMockTimeBlocks();\r\n    const mockBlock = {\r\n      ...timeBlock,\r\n      id: Date.now().toString(),\r\n    };\r\n    blocks.push(mockBlock);\r\n    setMockTimeBlocks(blocks);\r\n    return mockBlock;\r\n  }\r\n};\r\n\r\nexport const updateTimeBlock = async (timeBlock) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/timeblocks/${timeBlock.id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(timeBlock),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to update time block');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error updating time block:', error);\r\n    // Update in localStorage\r\n    const blocks = getMockTimeBlocks();\r\n    const index = blocks.findIndex(block => block.id === timeBlock.id);\r\n    if (index !== -1) {\r\n      blocks[index] = timeBlock;\r\n      setMockTimeBlocks(blocks);\r\n      return timeBlock;\r\n    }\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const deleteTimeBlock = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/timeblocks/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete time block');\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting time block:', error);\r\n    // Delete from localStorage\r\n    const blocks = getMockTimeBlocks();\r\n    const updatedBlocks = blocks.filter(block => block.id !== id);\r\n    setMockTimeBlocks(updatedBlocks);\r\n    return true;\r\n  }\r\n};\r\n\r\n// Task API calls (using Fetch API instead of axios for consistency)\r\nexport const getTasks = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/tasks`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch tasks');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching tasks:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const createTask = async (task) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/tasks`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(task),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to create task');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error creating task:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const updateTask = async (id, task) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/tasks/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(task),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to update task');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error updating task:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const deleteTask = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/tasks/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete task');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error deleting task:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Pomodoro Session API calls\r\nexport const getPomodoroSessions = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/pomodoro-sessions`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch pomodoro sessions');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching pomodoro sessions:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const createPomodoroSession = async (session) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/pomodoro-sessions`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(session),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to create pomodoro session');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error creating pomodoro session:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Recurring Tasks API\r\nexport const getRecurringTasks = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch recurring tasks');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching recurring tasks:', error);\r\n    // Return mock data from localStorage\r\n    return getMockRecurringTasks();\r\n  }\r\n};\r\n\r\nexport const createRecurringTask = async (task) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(task),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to create recurring task');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error creating recurring task:', error);\r\n    // Save to localStorage\r\n    const tasks = getMockRecurringTasks();\r\n    const mockTask = {\r\n      ...task,\r\n      id: Date.now().toString(),\r\n      completed: false,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    tasks.push(mockTask);\r\n    setMockRecurringTasks(tasks);\r\n    return mockTask;\r\n  }\r\n};\r\n\r\nexport const updateRecurringTask = async (task) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks/${task.id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(task),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to update recurring task');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error updating recurring task:', error);\r\n    // Update in localStorage\r\n    const tasks = getMockRecurringTasks();\r\n    const index = tasks.findIndex(t => t.id === task.id);\r\n    if (index !== -1) {\r\n      tasks[index] = task;\r\n      setMockRecurringTasks(tasks);\r\n      return task;\r\n    }\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const deleteRecurringTask = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete recurring task');\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting recurring task:', error);\r\n    // Delete from localStorage\r\n    const tasks = getMockRecurringTasks();\r\n    const updatedTasks = tasks.filter(task => task.id !== id);\r\n    setMockRecurringTasks(updatedTasks);\r\n    return true;\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}