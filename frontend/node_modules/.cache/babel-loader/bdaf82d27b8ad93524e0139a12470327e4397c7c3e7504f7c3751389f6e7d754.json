{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Time Block API calls\nexport const getTimeBlocks = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/timeblocks`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch time blocks');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching time blocks:', error);\n    // Return mock data for development\n    return getMockTimeBlocks();\n  }\n};\nexport const createTimeBlock = async timeBlock => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/timeblocks`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(timeBlock)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create time block');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating time block:', error);\n    // Return mock for development\n    const mockBlock = {\n      ...timeBlock,\n      id: Date.now().toString()\n    };\n    mockTimeBlocks.push(mockBlock);\n    return mockBlock;\n  }\n};\nexport const updateTimeBlock = async timeBlock => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/timeblocks/${timeBlock.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(timeBlock)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update time block');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating time block:', error);\n    // Update mock data for development\n    const index = mockTimeBlocks.findIndex(block => block.id === timeBlock.id);\n    if (index !== -1) {\n      mockTimeBlocks[index] = timeBlock;\n      return timeBlock;\n    }\n    return null;\n  }\n};\nexport const deleteTimeBlock = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/timeblocks/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete time block');\n    }\n    return true;\n  } catch (error) {\n    console.error('Error deleting time block:', error);\n    // Delete from mock data for development\n    const index = mockTimeBlocks.findIndex(block => block.id === id);\n    if (index !== -1) {\n      mockTimeBlocks.splice(index, 1);\n    }\n    return true;\n  }\n};\n\n// Task API calls\nexport const getTasks = async () => {\n  const response = await axios.get(`${API_BASE_URL}/tasks`);\n  return response.data;\n};\nexport const createTask = async task => {\n  const response = await axios.post(`${API_BASE_URL}/tasks`, task);\n  return response.data;\n};\nexport const updateTask = async (id, task) => {\n  const response = await axios.put(`${API_BASE_URL}/tasks/${id}`, task);\n  return response.data;\n};\nexport const deleteTask = async id => {\n  const response = await axios.delete(`${API_BASE_URL}/tasks/${id}`);\n  return response.data;\n};\n\n// Pomodoro Session API calls\nexport const getPomodoroSessions = async () => {\n  const response = await axios.get(`${API_BASE_URL}/pomodoro-sessions`);\n  return response.data;\n};\nexport const createPomodoroSession = async session => {\n  const response = await axios.post(`${API_BASE_URL}/pomodoro-sessions`, session);\n  return response.data;\n};\n\n// Recurring Tasks API\n\n/**\r\n * Get all recurring tasks\r\n * @returns {Promise<Array>} - Array of recurring tasks\r\n */\nexport const getRecurringTasks = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch recurring tasks');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching recurring tasks:', error);\n    // Return mock data for development\n    return getMockRecurringTasks();\n  }\n};\n\n/**\r\n * Create a new recurring task\r\n * @param {Object} task - The recurring task to create\r\n * @returns {Promise<Object>} - The created recurring task\r\n */\nexport const createRecurringTask = async task => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create recurring task');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error creating recurring task:', error);\n    // Return mock for development\n    const mockTask = {\n      ...task,\n      id: Date.now().toString(),\n      completed: false,\n      createdAt: new Date().toISOString()\n    };\n    mockRecurringTasks.push(mockTask);\n    return mockTask;\n  }\n};\n\n/**\r\n * Update a recurring task\r\n * @param {Object} task - The recurring task to update\r\n * @returns {Promise<Object>} - The updated recurring task\r\n */\nexport const updateRecurringTask = async task => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks/${task.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(task)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update recurring task');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error updating recurring task:', error);\n    // Update mock data for development\n    const index = mockRecurringTasks.findIndex(t => t.id === task.id);\n    if (index !== -1) {\n      mockRecurringTasks[index] = task;\n      return task;\n    }\n    return null;\n  }\n};\n\n/**\r\n * Delete a recurring task\r\n * @param {string} id - The ID of the recurring task to delete\r\n * @returns {Promise<void>}\r\n */\nexport const deleteRecurringTask = async id => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks/${id}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete recurring task');\n    }\n    return true;\n  } catch (error) {\n    console.error('Error deleting recurring task:', error);\n    // Delete from mock data for development\n    const index = mockRecurringTasks.findIndex(task => task.id === id);\n    if (index !== -1) {\n      mockRecurringTasks.splice(index, 1);\n    }\n    return true;\n  }\n};\n\n// Mock data for development (will be replaced by actual API responses in production)\n\n// Mock time blocks\nlet mockTimeBlocks = [{\n  id: '1',\n  title: 'Project Meeting',\n  description: 'Discuss project timeline and milestones',\n  date: new Date().toISOString().split('T')[0],\n  startTime: '09:00',\n  endTime: '10:30',\n  category: 'work',\n  priority: 'high'\n}, {\n  id: '2',\n  title: 'Study Session',\n  description: 'Review course materials for upcoming exam',\n  date: new Date().toISOString().split('T')[0],\n  startTime: '14:00',\n  endTime: '16:00',\n  category: 'academic',\n  priority: 'high'\n}, {\n  id: '3',\n  title: 'Exercise',\n  description: 'Go for a run in the park',\n  date: new Date().toISOString().split('T')[0],\n  startTime: '17:30',\n  endTime: '18:30',\n  category: 'personal',\n  priority: 'medium'\n}];\n\n// Mock recurring tasks\nlet mockRecurringTasks = [{\n  id: '1',\n  title: 'Team Standup',\n  description: 'Daily team meeting to discuss progress',\n  frequency: 'daily',\n  category: 'work',\n  priority: 'high',\n  completed: false,\n  nextDueDate: new Date().toISOString().split('T')[0],\n  createdAt: new Date().toISOString()\n}, {\n  id: '2',\n  title: 'Weekly Report',\n  description: 'Submit weekly progress report',\n  frequency: 'weekly',\n  category: 'work',\n  priority: 'medium',\n  completed: false,\n  nextDueDate: new Date().toISOString().split('T')[0],\n  createdAt: new Date().toISOString()\n}, {\n  id: '3',\n  title: 'Pay Bills',\n  description: 'Pay monthly bills and subscriptions',\n  frequency: 'monthly',\n  category: 'personal',\n  priority: 'high',\n  completed: false,\n  nextDueDate: new Date().toISOString().split('T')[0],\n  createdAt: new Date().toISOString()\n}];\n\n// Helper functions to get mock data\nconst getMockTimeBlocks = () => {\n  return [...mockTimeBlocks];\n};\nconst getMockRecurringTasks = () => {\n  return [...mockRecurringTasks];\n};","map":{"version":3,"names":["axios","API_BASE_URL","getTimeBlocks","response","fetch","ok","Error","json","error","console","getMockTimeBlocks","createTimeBlock","timeBlock","method","headers","body","JSON","stringify","mockBlock","id","Date","now","toString","mockTimeBlocks","push","updateTimeBlock","index","findIndex","block","deleteTimeBlock","splice","getTasks","get","data","createTask","task","post","updateTask","put","deleteTask","delete","getPomodoroSessions","createPomodoroSession","session","getRecurringTasks","getMockRecurringTasks","createRecurringTask","mockTask","completed","createdAt","toISOString","mockRecurringTasks","updateRecurringTask","t","deleteRecurringTask","title","description","date","split","startTime","endTime","category","priority","frequency","nextDueDate"],"sources":["C:/Users/wwjie/time-blocking-app/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Time Block API calls\r\nexport const getTimeBlocks = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/timeblocks`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch time blocks');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching time blocks:', error);\r\n    // Return mock data for development\r\n    return getMockTimeBlocks();\r\n  }\r\n};\r\n\r\nexport const createTimeBlock = async (timeBlock) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/timeblocks`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(timeBlock),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to create time block');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error creating time block:', error);\r\n    // Return mock for development\r\n    const mockBlock = {\r\n      ...timeBlock,\r\n      id: Date.now().toString(),\r\n    };\r\n    mockTimeBlocks.push(mockBlock);\r\n    return mockBlock;\r\n  }\r\n};\r\n\r\nexport const updateTimeBlock = async (timeBlock) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/timeblocks/${timeBlock.id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(timeBlock),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to update time block');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error updating time block:', error);\r\n    // Update mock data for development\r\n    const index = mockTimeBlocks.findIndex(block => block.id === timeBlock.id);\r\n    if (index !== -1) {\r\n      mockTimeBlocks[index] = timeBlock;\r\n      return timeBlock;\r\n    }\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const deleteTimeBlock = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/timeblocks/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete time block');\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting time block:', error);\r\n    // Delete from mock data for development\r\n    const index = mockTimeBlocks.findIndex(block => block.id === id);\r\n    if (index !== -1) {\r\n      mockTimeBlocks.splice(index, 1);\r\n    }\r\n    return true;\r\n  }\r\n};\r\n\r\n// Task API calls\r\nexport const getTasks = async () => {\r\n  const response = await axios.get(`${API_BASE_URL}/tasks`);\r\n  return response.data;\r\n};\r\n\r\nexport const createTask = async (task) => {\r\n  const response = await axios.post(`${API_BASE_URL}/tasks`, task);\r\n  return response.data;\r\n};\r\n\r\nexport const updateTask = async (id, task) => {\r\n  const response = await axios.put(`${API_BASE_URL}/tasks/${id}`, task);\r\n  return response.data;\r\n};\r\n\r\nexport const deleteTask = async (id) => {\r\n  const response = await axios.delete(`${API_BASE_URL}/tasks/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Pomodoro Session API calls\r\nexport const getPomodoroSessions = async () => {\r\n  const response = await axios.get(`${API_BASE_URL}/pomodoro-sessions`);\r\n  return response.data;\r\n};\r\n\r\nexport const createPomodoroSession = async (session) => {\r\n  const response = await axios.post(`${API_BASE_URL}/pomodoro-sessions`, session);\r\n  return response.data;\r\n};\r\n\r\n// Recurring Tasks API\r\n\r\n/**\r\n * Get all recurring tasks\r\n * @returns {Promise<Array>} - Array of recurring tasks\r\n */\r\nexport const getRecurringTasks = async () => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch recurring tasks');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching recurring tasks:', error);\r\n    // Return mock data for development\r\n    return getMockRecurringTasks();\r\n  }\r\n};\r\n\r\n/**\r\n * Create a new recurring task\r\n * @param {Object} task - The recurring task to create\r\n * @returns {Promise<Object>} - The created recurring task\r\n */\r\nexport const createRecurringTask = async (task) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(task),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to create recurring task');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error creating recurring task:', error);\r\n    // Return mock for development\r\n    const mockTask = {\r\n      ...task,\r\n      id: Date.now().toString(),\r\n      completed: false,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    mockRecurringTasks.push(mockTask);\r\n    return mockTask;\r\n  }\r\n};\r\n\r\n/**\r\n * Update a recurring task\r\n * @param {Object} task - The recurring task to update\r\n * @returns {Promise<Object>} - The updated recurring task\r\n */\r\nexport const updateRecurringTask = async (task) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks/${task.id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(task),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to update recurring task');\r\n    }\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error updating recurring task:', error);\r\n    // Update mock data for development\r\n    const index = mockRecurringTasks.findIndex(t => t.id === task.id);\r\n    if (index !== -1) {\r\n      mockRecurringTasks[index] = task;\r\n      return task;\r\n    }\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Delete a recurring task\r\n * @param {string} id - The ID of the recurring task to delete\r\n * @returns {Promise<void>}\r\n */\r\nexport const deleteRecurringTask = async (id) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/recurring-tasks/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete recurring task');\r\n    }\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting recurring task:', error);\r\n    // Delete from mock data for development\r\n    const index = mockRecurringTasks.findIndex(task => task.id === id);\r\n    if (index !== -1) {\r\n      mockRecurringTasks.splice(index, 1);\r\n    }\r\n    return true;\r\n  }\r\n};\r\n\r\n// Mock data for development (will be replaced by actual API responses in production)\r\n\r\n// Mock time blocks\r\nlet mockTimeBlocks = [\r\n  {\r\n    id: '1',\r\n    title: 'Project Meeting',\r\n    description: 'Discuss project timeline and milestones',\r\n    date: new Date().toISOString().split('T')[0],\r\n    startTime: '09:00',\r\n    endTime: '10:30',\r\n    category: 'work',\r\n    priority: 'high'\r\n  },\r\n  {\r\n    id: '2',\r\n    title: 'Study Session',\r\n    description: 'Review course materials for upcoming exam',\r\n    date: new Date().toISOString().split('T')[0],\r\n    startTime: '14:00',\r\n    endTime: '16:00',\r\n    category: 'academic',\r\n    priority: 'high'\r\n  },\r\n  {\r\n    id: '3',\r\n    title: 'Exercise',\r\n    description: 'Go for a run in the park',\r\n    date: new Date().toISOString().split('T')[0],\r\n    startTime: '17:30',\r\n    endTime: '18:30',\r\n    category: 'personal',\r\n    priority: 'medium'\r\n  }\r\n];\r\n\r\n// Mock recurring tasks\r\nlet mockRecurringTasks = [\r\n  {\r\n    id: '1',\r\n    title: 'Team Standup',\r\n    description: 'Daily team meeting to discuss progress',\r\n    frequency: 'daily',\r\n    category: 'work',\r\n    priority: 'high',\r\n    completed: false,\r\n    nextDueDate: new Date().toISOString().split('T')[0],\r\n    createdAt: new Date().toISOString()\r\n  },\r\n  {\r\n    id: '2',\r\n    title: 'Weekly Report',\r\n    description: 'Submit weekly progress report',\r\n    frequency: 'weekly',\r\n    category: 'work',\r\n    priority: 'medium',\r\n    completed: false,\r\n    nextDueDate: new Date().toISOString().split('T')[0],\r\n    createdAt: new Date().toISOString()\r\n  },\r\n  {\r\n    id: '3',\r\n    title: 'Pay Bills',\r\n    description: 'Pay monthly bills and subscriptions',\r\n    frequency: 'monthly',\r\n    category: 'personal',\r\n    priority: 'high',\r\n    completed: false,\r\n    nextDueDate: new Date().toISOString().split('T')[0],\r\n    createdAt: new Date().toISOString()\r\n  }\r\n];\r\n\r\n// Helper functions to get mock data\r\nconst getMockTimeBlocks = () => {\r\n  return [...mockTimeBlocks];\r\n};\r\n\r\nconst getMockRecurringTasks = () => {\r\n  return [...mockRecurringTasks];\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}